"""
nomad jobs
"""
load(
    "//executor/exec_config.proto",
    "Config",
    "WatcherConfig",
    "Action",
    "ActionTypeHttp",
)
load("/nomad/v0.11.1/api.proto", "RegisterJobRequest")
load("job.pinc", "NewJob")


def JobRegistry(
    executor_name="jobs-executor",
    config_root="jobs/jobs",
    cluster_address="https://127.0.0.1:4646",
):
    """
    JobRegistry

    Args:
        executor_name: the name of the task that executes the jobs (must be globally uniq)
        config_root: the basedir of the mpconf file initiates the JobRegistry instance
        cluster_address: the address of the nomad cluster
    Returns:
        A struct contains the output for mpconf and the register_job function
    """
    executor = Config(items=[])

    output = {"apply": executor}

    def register_job(job):
        output[job.ID] = RegisterJobRequest(Job=job)
        e = WatcherConfig(
            path="/".join([config_root, job.ID]),
            proto_file="nomad/v0.11.1/api.proto",
            actions=[
                Action(
                    http=ActionTypeHttp(
                        uri=cluster_address + "/v1/jobs", method="POST"
                    )
                ),
            ],
        )
        executor.items.append(e)

    def newJob(*args, **kwargs):
        j = NewJob(*args, **kwargs)
        register_job(j.job)
        return j

    return struct(
        output=output,
        register_job=register_job,
        RegisterJob=register_job,
        NewJob=newJob,
    )
