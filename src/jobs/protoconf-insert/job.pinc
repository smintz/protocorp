"""
"""
load("/webhook/hook-proto.pinc", "HOOK_PROTO")
load("/nomad/v0.11.1/api.proto", "Template", "ServiceCheck", "CheckRestart")
load("/jobs/helpers/job.pinc", "NewJob")
load("insertion-script.pinc", "PROTOCONF_INSERT_SCRIPT")
load("/jobs/protoconf_exec_task.pinc", "ProtoconfExecTask")
load("/infra/consts.pinc", "CONSUL_DOMAIN")


job = NewJob("protoconf-inserter")
job.SetCount(3)
job.AddTask(
    ProtoconfExecTask(
        "jobs/protoconf-insert/config", {"webhook/hook.proto": HOOK_PROTO}
    )
)
webhook_task = job.NewTask("webhook")
webhook_task.SetImage("smintz/webhook:latest")
webhook_task.SetConfig("volumes", ["/etc/ssl:/etc/ssl"])
webhook_task.SetConfig(
    "args", ["-verbose", "-hooks=/alloc/tmp/hooks.json", "-hotreload"]
)
webhook_task.AddVaultPolicies("github-policy")
webhook_task.NewService(
    "webhooks",
    to=9000,
    tags=[
        "httpprefix-webhooks.service.{dc}.{domain}/".format(
            dc=dc, domain=CONSUL_DOMAIN
        )
        for dc in job.job.Datacenters
    ],
    checks=[
        ServiceCheck(
            Type="http",
            Path="/hooks/protoconf-insert",
            Interval=10 * 1000000000,
            Timeout=2 * 1000000000,
            CheckRestart=CheckRestart(Limit=5),
        )
    ],
)
webhook_task.SetMemory(512)

webhook_task.task.Templates = [
    Template(
        DestPath="local/insertion-script.sh",
        EmbeddedTmpl=PROTOCONF_INSERT_SCRIPT,
        Perms="0755",
    ),
    Template(
        DestPath="local/git-creds",
        EmbeddedTmpl="""{{with secret "kv/github-creds"}}{{.Data.url}}{{end}}""",
        Perms="0600",
    ),
    Template(DestPath="/alloc/tmp/hooks.json", EmbeddedTmpl="[]"),
]
