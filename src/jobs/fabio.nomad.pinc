"""
fabio
"""
load("/jobs/helpers/job.pinc", "NewJob")
load("/nomad/v0.11.1/api.proto", "ServiceCheck", "CheckRestart")
load("/infra/consts.pinc", "CONSUL_DOMAIN")


FABIO_JOB = NewJob("fabio", type="system")


def fabio_task(port, proto):
    task = FABIO_JOB.NewTask("fabio-%s" % proto, proto)
    task.SetImage("fabiolb/fabio")
    task.SetMemory(512)
    task.SetConfig("volumes", ["/etc/ssl:/etc/ssl"])
    task.NewService(
        "fabio-%s" % proto,
        to=9998,
        checks=[
            ServiceCheck(
                Type="http",
                Path="/health",
                Interval=10 * 1000000000,
                Timeout=2 * 1000000000,
                CheckRestart=CheckRestart(Limit=5),
            )
        ],
        tags=[
            "urlprefix-fabio-{}.{}.service.{}/".format(proto, dc, CONSUL_DOMAIN)
            for dc in FABIO_JOB.job.Datacenters
        ],
        label="ui",
    )
    task.task.Env = {
        "FABIO_REGISTRY_CONSUL_ADDR": "https://169.254.1.1:8501",
        "FABIO_PROXY_ADDR": ":{};proto={}".format(port, proto),
        "FABIO_UI_ADDR": ":${NOMAD_PORT_ui}",
    }

    task.NewPort("lb", reserve=port, to=port)
    return task


fabio_task(80, "http")
fabio_task(9999, "grpc")

# task.NewService(
#     "fabio-lb",
#     reserve=9999,
#     checks=[
#         ServiceCheck(
#             Type="tcp",
#             Interval=10 * 1000000000,
#             Timeout=2 * 1000000000,
#             CheckRestart=CheckRestart(Limit=5),
#         )
#     ],
# )
