"""
envoy helpers
"""
load("//envoy/config/bootstrap/v2/bootstrap.proto", "Bootstrap", "Admin")
load(
    "//envoy/config/filter/network/http_connection_manager/v2/http_connection_manager.proto",
    "HttpConnectionManager",
)
load("//envoy/config/filter/accesslog/v2/accesslog.proto", "AccessLog")
load("//envoy/config/accesslog/v2/file.proto", "FileAccessLog")
load("//envoy/api/v2/route.proto", "RouteConfiguration")
load("//envoy/api/v2/listener.proto", "Listener")
load("//envoy/api/v2/cluster.proto", "Cluster", "UpstreamConnectionOptions")
load("//envoy/api/v2/endpoint.proto", "ClusterLoadAssignment")
load(
    "//envoy/api/v2/core/config_source.proto", "ConfigSource", "ApiConfigSource"
)
load("//envoy/api/v2/core/grpc_service.proto", "GrpcService")
load(
    "//envoy/api/v2/endpoint/endpoint_components.proto",
    "LocalityLbEndpoints",
    "LbEndpoint",
    "Endpoint",
)
load(
    "//envoy/api/v2/listener/listener_components.proto", "FilterChain", "Filter"
)
load("//envoy/api/v2/core/protocol.proto", "Http2ProtocolOptions")
load(
    "//envoy/api/v2/route/route_components.proto",
    "VirtualHost",
    "Route",
    "RouteMatch",
    "RouteAction",
)
load(
    "//envoy/api/v2/core/address.proto",
    "Address",
    "SocketAddress",
    "TcpKeepalive",
)
load("/google/protobuf/duration.proto", "Duration")
load("//rollout/rollout.pinc", "GradualRollout")
load("//rollout/rollout_demo.pinc", "demo_registry")


def virtual_host_from_service(service):
    svc_name = service.name.lower()
    return VirtualHost(
        name=svc_name,
        domains=[svc_name],
        routes=[
            # Route(
            #     name=svc_name,
            #     match=RouteMatch(prefix="/"),
            #     route=RouteAction(cluster=svc_name),
            # )
        ],
    )


def connection_manager_for_service(service):
    add_access_log = GradualRollout("HELLO_WORLD", demo_registry).for_item(
        service.name.lower()
    )
    value = HttpConnectionManager(
        codec_type=HttpConnectionManager.CodecType.AUTO,
        stat_prefix=service.name.lower(),
        route_config=RouteConfiguration(
            name=service.name.lower() + "_route",
            virtual_hosts=[
                virtual_host_from_service(s) for s in service.downstreams
            ],
        ),
    )
    if add_access_log:
        value.access_log = [
            AccessLog(
                name="envoy.access_loggers.file",
                typed_config=FileAccessLog(path="/dev/stdout"),
            )
        ]
    return value


api_config_source = ApiConfigSource(
    api_type=ApiConfigSource.ApiType.GRPC,
    grpc_services=[
        GrpcService(
            envoy_grpc=GrpcService.EnvoyGrpc(cluster_name="xds_cluster")
        )
    ],
)


def bootstrap_for_service(service):
    bootstrap = Bootstrap(
        # admin=Admin(
        #     access_log_path="/dev/stdout",
        #     address=Address(
        #         socket_address=SocketAddress(address="0.0.0.0", port_value=8881)
        #     ),
        # ),
        dynamic_resources=Bootstrap.DynamicResources(
            # lds_config=ConfigSource(),
            # cds_config=ConfigSource(),
            # ads_config=api_config_source,
        ),
        static_resources=Bootstrap.StaticResources(
            listeners=[
                Listener(
                    address=Address(
                        socket_address=SocketAddress(
                            address="0.0.0.0", port_value=11000
                        )
                    ),
                    name="forwarder",
                    filter_chains=[
                        FilterChain(
                            filters=[
                                Filter(
                                    name="envoy.filters.network.http_connection_manager",
                                    typed_config=connection_manager_for_service(
                                        service
                                    ),
                                )
                            ]
                        )
                    ],
                )
            ],
            clusters=[],
        ),
    )
    return bootstrap
