syntax = "proto3";

package terraform.digitalocean.data;

import "terraform/meta.proto";

//DigitaloceanAccount version is 0
message DigitaloceanAccount {
  //The total number of Droplets current user or team may have active at one time.
  int64 droplet_limit = 1 [json_name = "droplet_limit"];

  //The email address used by the current user to register for DigitalOcean.
  string email = 2;

  //If true, the user has verified their account via email. False otherwise.
  bool email_verified = 3 [json_name = "email_verified"];

  //The total number of Floating IPs the current user or team may have.
  int64 floating_ip_limit = 4 [json_name = "floating_ip_limit"];

  string id = 5;

  //This value is one of "active", "warning" or "locked".
  string status = 6;

  //A human-readable message giving more details about the status of the account.
  string status_message = 7 [json_name = "status_message"];

  //The unique universal identifier for the current user.
  string uuid = 8;

  terraform.meta.MetaFields.DependsOnEntry depends_on = 9;

  int32 count = 10;

  terraform.meta.MetaFields.ForEachEntry for_each = 11;

  string provider = 12;

  terraform.meta.Lifecycle lifecycle = 13;
}

//DigitaloceanCertificate version is 0
message DigitaloceanCertificate {
  //domains for which the certificate was issued
  repeated string domains = 1;

  string id = 2;

  //name of the certificate
  string name = 3;

  //expiration date and time of the certificate
  string not_after = 4 [json_name = "not_after"];

  //SHA1 fingerprint of the certificate
  string sha1_fingerprint = 5 [json_name = "sha1_fingerprint"];

  //current state of the certificate
  string state = 6;

  //type of the certificate
  string type = 7;

  terraform.meta.MetaFields.DependsOnEntry depends_on = 8;

  int32 count = 9;

  terraform.meta.MetaFields.ForEachEntry for_each = 10;

  string provider = 11;

  terraform.meta.Lifecycle lifecycle = 12;
}

//DigitaloceanDatabaseCluster version is 0
message DigitaloceanDatabaseCluster {
  string database = 1;

  string engine = 2;

  string host = 3;

  string id = 4;

  repeated MaintenanceWindow maintenance_window = 5 [json_name = "maintenance_window"];

  string name = 6;

  int64 node_count = 7 [json_name = "node_count"];

  string password = 8;

  int64 port = 9;

  string private_host = 10 [json_name = "private_host"];

  string private_uri = 11 [json_name = "private_uri"];

  string region = 12;

  string size = 13;

  repeated string tags = 14;

  string uri = 15;

  string urn = 16;

  string user = 17;

  string version = 18;

  terraform.meta.MetaFields.DependsOnEntry depends_on = 19;

  int32 count = 20;

  terraform.meta.MetaFields.ForEachEntry for_each = 21;

  string provider = 22;

  terraform.meta.Lifecycle lifecycle = 23;

  message MaintenanceWindow {
    //day: string
    string day = 1;

    //hour: string
    string hour = 2;
  }
}

//DigitaloceanDomain version is 0
message DigitaloceanDomain {
  string id = 1;

  //name of the domain
  string name = 2;

  //ttl of the domain
  int64 ttl = 3;

  //the uniform resource name for the domain
  string urn = 4;

  //zone file of the domain
  string zone_file = 5 [json_name = "zone_file"];

  terraform.meta.MetaFields.DependsOnEntry depends_on = 6;

  int32 count = 7;

  terraform.meta.MetaFields.ForEachEntry for_each = 8;

  string provider = 9;

  terraform.meta.Lifecycle lifecycle = 10;
}

//DigitaloceanDroplet version is 0
message DigitaloceanDroplet {
  //whether the droplet has backups enabled
  bool backups = 1;

  //the creation date for the Droplet
  string created_at = 2 [json_name = "created_at"];

  //the size of the droplets disk in gigabytes
  int64 disk = 3;

  //id of the droplet
  int64 id = 4;

  //the image id or slug of the Droplet
  string image = 5;

  //the droplets public ipv4 address
  string ipv4_address = 6 [json_name = "ipv4_address"];

  //the droplets private ipv4 address
  string ipv4_address_private = 7 [json_name = "ipv4_address_private"];

  //whether the droplet has ipv6 enabled
  bool ipv6 = 8;

  //the droplets public ipv6 address
  string ipv6_address = 9 [json_name = "ipv6_address"];

  //the droplets private ipv4 address
  string ipv6_address_private = 10 [json_name = "ipv6_address_private"];

  //whether the droplet has been locked
  bool locked = 11;

  //memory of the droplet in megabytes
  int64 memory = 12;

  //whether the droplet has monitoring enabled
  bool monitoring = 13;

  //name of the droplet
  string name = 14;

  //the droplets hourly price
  int64 price_hourly = 15 [json_name = "price_hourly"];

  //the droplets monthly price
  int64 price_monthly = 16 [json_name = "price_monthly"];

  //whether the droplet has private networking enabled
  bool private_networking = 17 [json_name = "private_networking"];

  //the region that the droplet instance is deployed in
  string region = 18;

  //the current size of the Droplet
  string size = 19;

  //state of the droplet instance
  string status = 20;

  //unique tag of the droplet
  string tag = 21;

  repeated string tags = 22;

  //the uniform resource name for the Droplet
  string urn = 23;

  //the number of virtual cpus
  int64 vcpus = 24;

  //list of volumes attached to the droplet
  repeated string volume_ids = 25 [json_name = "volume_ids"];

  terraform.meta.MetaFields.DependsOnEntry depends_on = 26;

  int32 count = 27;

  terraform.meta.MetaFields.ForEachEntry for_each = 28;

  string provider = 29;

  terraform.meta.Lifecycle lifecycle = 30;
}

//DigitaloceanDropletSnapshot version is 0
message DigitaloceanDropletSnapshot {
  string created_at = 1 [json_name = "created_at"];

  string droplet_id = 2 [json_name = "droplet_id"];

  string id = 3;

  int64 min_disk_size = 4 [json_name = "min_disk_size"];

  bool most_recent = 5 [json_name = "most_recent"];

  string name = 6;

  string name_regex = 7 [json_name = "name_regex"];

  string region = 8;

  repeated string regions = 9;

  int64 size = 10;

  terraform.meta.MetaFields.DependsOnEntry depends_on = 11;

  int32 count = 12;

  terraform.meta.MetaFields.ForEachEntry for_each = 13;

  string provider = 14;

  terraform.meta.Lifecycle lifecycle = 15;
}

//DigitaloceanFloatingIp version is 0
message DigitaloceanFloatingIp {
  //the droplet id that the floating ip has been assigned to.
  int64 droplet_id = 1 [json_name = "droplet_id"];

  string id = 2;

  //floating ip address
  string ip_address = 3 [json_name = "ip_address"];

  //the region that the floating ip is reserved to
  string region = 4;

  //the uniform resource name for the floating ip
  string urn = 5;

  terraform.meta.MetaFields.DependsOnEntry depends_on = 6;

  int32 count = 7;

  terraform.meta.MetaFields.ForEachEntry for_each = 8;

  string provider = 9;

  terraform.meta.Lifecycle lifecycle = 10;
}

//DigitaloceanImage version is 0
message DigitaloceanImage {
  string created = 1;

  //distribution of the OS of the image
  string distribution = 2;

  //error message associated with the image
  string error_message = 3 [json_name = "error_message"];

  //id of the image
  int64 id = 4;

  //slug or id of the image
  string image = 5;

  //minimum disk size required by the image
  int64 min_disk_size = 6 [json_name = "min_disk_size"];

  //name of the image
  string name = 7;

  //Is the image private or non-private
  bool private = 8;

  //list of the regions that the image is available in
  repeated string regions = 9;

  //size in GB of the image
  int64 size_gigabytes = 10 [json_name = "size_gigabytes"];

  //slug of the image
  string slug = 11;

  string source = 12;

  //status of the image
  string status = 13;

  //tags applied to the image
  repeated string tags = 14;

  //type of the image
  string type = 15;

  terraform.meta.MetaFields.DependsOnEntry depends_on = 16;

  int32 count = 17;

  terraform.meta.MetaFields.ForEachEntry for_each = 18;

  string provider = 19;

  terraform.meta.Lifecycle lifecycle = 20;
}

//DigitaloceanImages version is 0
message DigitaloceanImages {
  string id = 1;

  repeated Images images = 2;

  Filter filter = 3;

  Sort sort = 4;

  terraform.meta.MetaFields.DependsOnEntry depends_on = 5;

  int32 count = 6;

  terraform.meta.MetaFields.ForEachEntry for_each = 7;

  string provider = 8;

  terraform.meta.Lifecycle lifecycle = 9;

  message Images {
    //created: string
    string created = 1;

    //distribution: string
    string distribution = 2;

    //error_message: string
    string error_message = 3 [json_name = "error_message"];

    //id: number
    int64 id = 4;

    //image: string
    string image = 5;

    //min_disk_size: number
    int64 min_disk_size = 6 [json_name = "min_disk_size"];

    //name: string
    string name = 7;

    //private: bool
    bool private = 8;

    //regions: set of string
    repeated string regions = 9;

    //size_gigabytes: number
    int64 size_gigabytes = 10 [json_name = "size_gigabytes"];

    //slug: string
    string slug = 11;

    //status: string
    string status = 12;

    //tags: set of string
    repeated string tags = 13;

    //type: string
    string type = 14;
  }

  message Filter {
    string key = 1;

    repeated string values = 2;
  }

  message Sort {
    string direction = 1;

    string key = 2;
  }
}

//DigitaloceanKubernetesCluster version is 0
message DigitaloceanKubernetesCluster {
  string cluster_subnet = 1 [json_name = "cluster_subnet"];

  string created_at = 2 [json_name = "created_at"];

  string endpoint = 3;

  string id = 4;

  string ipv4_address = 5 [json_name = "ipv4_address"];

  repeated KubeConfig kube_config = 6 [json_name = "kube_config"];

  string name = 7;

  repeated NodePool node_pool = 8 [json_name = "node_pool"];

  string region = 9;

  string service_subnet = 10 [json_name = "service_subnet"];

  string status = 11;

  repeated string tags = 12;

  string updated_at = 13 [json_name = "updated_at"];

  string version = 14;

  terraform.meta.MetaFields.DependsOnEntry depends_on = 15;

  int32 count = 16;

  terraform.meta.MetaFields.ForEachEntry for_each = 17;

  string provider = 18;

  terraform.meta.Lifecycle lifecycle = 19;

  message KubeConfig {
    //client_certificate: string
    string client_certificate = 1 [json_name = "client_certificate"];

    //client_key: string
    string client_key = 2 [json_name = "client_key"];

    //cluster_ca_certificate: string
    string cluster_ca_certificate = 3 [json_name = "cluster_ca_certificate"];

    //expires_at: string
    string expires_at = 4 [json_name = "expires_at"];

    //host: string
    string host = 5;

    //raw_config: string
    string raw_config = 6 [json_name = "raw_config"];

    //token: string
    string token = 7;
  }

  message NodePool {
    //actual_node_count: number
    int64 actual_node_count = 1 [json_name = "actual_node_count"];

    //auto_scale: bool
    bool auto_scale = 2 [json_name = "auto_scale"];

    //id: string
    string id = 3;

    //labels: map of string
    map<string, string> labels = 4;

    //max_nodes: number
    int64 max_nodes = 5 [json_name = "max_nodes"];

    //min_nodes: number
    int64 min_nodes = 6 [json_name = "min_nodes"];

    //name: string
    string name = 7;

    //node_count: number
    int64 node_count = 8 [json_name = "node_count"];

    //nodes: list of object
    repeated Nodes nodes = 9;

    //size: string
    string size = 10;

    //tags: set of string
    repeated string tags = 11;

    message Nodes {
      //created_at: string
      string created_at = 1 [json_name = "created_at"];

      //droplet_id: string
      string droplet_id = 2 [json_name = "droplet_id"];

      //id: string
      string id = 3;

      //name: string
      string name = 4;

      //status: string
      string status = 5;

      //updated_at: string
      string updated_at = 6 [json_name = "updated_at"];
    }
  }
}

//DigitaloceanKubernetesVersions version is 0
message DigitaloceanKubernetesVersions {
  string id = 1;

  string latest_version = 2 [json_name = "latest_version"];

  repeated string valid_versions = 3 [json_name = "valid_versions"];

  string version_prefix = 4 [json_name = "version_prefix"];

  terraform.meta.MetaFields.DependsOnEntry depends_on = 5;

  int32 count = 6;

  terraform.meta.MetaFields.ForEachEntry for_each = 7;

  string provider = 8;

  terraform.meta.Lifecycle lifecycle = 9;
}

//DigitaloceanLoadbalancer version is 0
message DigitaloceanLoadbalancer {
  //algorithm used to determine which backend Droplet will be selected by a client
  string algorithm = 1;

  //ids of the droplets assigned to the load balancer
  repeated int64 droplet_ids = 2 [json_name = "droplet_ids"];

  //the name of a tag corresponding to droplets assigned to the load balancer
  string droplet_tag = 3 [json_name = "droplet_tag"];

  //whether PROXY Protocol should be used to pass information from connecting client requests to the backend service
  bool enable_proxy_protocol = 4 [json_name = "enable_proxy_protocol"];

  //list of forwarding rules of the load balancer
  repeated ForwardingRule forwarding_rule = 5 [json_name = "forwarding_rule"];

  //health check settings for the load balancer
  repeated Healthcheck healthcheck = 6;

  string id = 7;

  //public-facing IP address of the load balancer
  string ip = 8;

  //name of the load balancer
  string name = 9;

  //whether http requests will be redirected to https
  bool redirect_http_to_https = 10 [json_name = "redirect_http_to_https"];

  //the region that the load blanacer is deployed in
  string region = 11;

  //current state of the Load Balancer
  string status = 12;

  //sticky sessions settings for the load balancer
  repeated StickySessions sticky_sessions = 13 [json_name = "sticky_sessions"];

  //the uniform resource name for the load balancer
  string urn = 14;

  terraform.meta.MetaFields.DependsOnEntry depends_on = 15;

  int32 count = 16;

  terraform.meta.MetaFields.ForEachEntry for_each = 17;

  string provider = 18;

  terraform.meta.Lifecycle lifecycle = 19;

  message ForwardingRule {
    //certificate_id: string
    string certificate_id = 1 [json_name = "certificate_id"];

    //entry_port: number
    int64 entry_port = 2 [json_name = "entry_port"];

    //entry_protocol: string
    string entry_protocol = 3 [json_name = "entry_protocol"];

    //target_port: number
    int64 target_port = 4 [json_name = "target_port"];

    //target_protocol: string
    string target_protocol = 5 [json_name = "target_protocol"];

    //tls_passthrough: bool
    bool tls_passthrough = 6 [json_name = "tls_passthrough"];
  }

  message Healthcheck {
    //check_interval_seconds: number
    int64 check_interval_seconds = 1 [json_name = "check_interval_seconds"];

    //healthy_threshold: number
    int64 healthy_threshold = 2 [json_name = "healthy_threshold"];

    //path: string
    string path = 3;

    //port: number
    int64 port = 4;

    //protocol: string
    string protocol = 5;

    //response_timeout_seconds: number
    int64 response_timeout_seconds = 6 [json_name = "response_timeout_seconds"];

    //unhealthy_threshold: number
    int64 unhealthy_threshold = 7 [json_name = "unhealthy_threshold"];
  }

  message StickySessions {
    //cookie_name: string
    string cookie_name = 1 [json_name = "cookie_name"];

    //cookie_ttl_seconds: number
    int64 cookie_ttl_seconds = 2 [json_name = "cookie_ttl_seconds"];

    //type: string
    string type = 3;
  }
}

//DigitaloceanProject version is 0
message DigitaloceanProject {
  //the date and time when the project was created, (ISO8601)
  string created_at = 1 [json_name = "created_at"];

  string description = 2;

  string environment = 3;

  string id = 4;

  bool is_default = 5 [json_name = "is_default"];

  string name = 6;

  int64 owner_id = 7 [json_name = "owner_id"];

  string owner_uuid = 8 [json_name = "owner_uuid"];

  string purpose = 9;

  repeated string resources = 10;

  //the date and time when the project was last updated, (ISO8601)
  string updated_at = 11 [json_name = "updated_at"];

  terraform.meta.MetaFields.DependsOnEntry depends_on = 12;

  int32 count = 13;

  terraform.meta.MetaFields.ForEachEntry for_each = 14;

  string provider = 15;

  terraform.meta.Lifecycle lifecycle = 16;
}

//DigitaloceanProjects version is 0
message DigitaloceanProjects {
  string id = 1;

  repeated Projects projects = 2;

  Filter filter = 3;

  Sort sort = 4;

  terraform.meta.MetaFields.DependsOnEntry depends_on = 5;

  int32 count = 6;

  terraform.meta.MetaFields.ForEachEntry for_each = 7;

  string provider = 8;

  terraform.meta.Lifecycle lifecycle = 9;

  message Projects {
    //created_at: string
    string created_at = 1 [json_name = "created_at"];

    //description: string
    string description = 2;

    //environment: string
    string environment = 3;

    //id: string
    string id = 4;

    //is_default: bool
    bool is_default = 5 [json_name = "is_default"];

    //name: string
    string name = 6;

    //owner_id: number
    int64 owner_id = 7 [json_name = "owner_id"];

    //owner_uuid: string
    string owner_uuid = 8 [json_name = "owner_uuid"];

    //purpose: string
    string purpose = 9;

    //resources: set of string
    repeated string resources = 10;

    //updated_at: string
    string updated_at = 11 [json_name = "updated_at"];
  }

  message Filter {
    string key = 1;

    repeated string values = 2;
  }

  message Sort {
    string direction = 1;

    string key = 2;
  }
}

//DigitaloceanRecord version is 0
message DigitaloceanRecord {
  //name record data
  string data = 1;

  //domain of the name record
  string domain = 2;

  //flags of the name record
  int64 flags = 3;

  string id = 4;

  //name of the record
  string name = 5;

  //port of the name record
  int64 port = 6;

  //priority of the name record
  int64 priority = 7;

  //tag of the name record
  string tag = 8;

  //ttl of the name record
  int64 ttl = 9;

  //type of the name record
  string type = 10;

  //weight of the name record
  int64 weight = 11;

  terraform.meta.MetaFields.DependsOnEntry depends_on = 12;

  int32 count = 13;

  terraform.meta.MetaFields.ForEachEntry for_each = 14;

  string provider = 15;

  terraform.meta.Lifecycle lifecycle = 16;
}

//DigitaloceanRegion version is 0
message DigitaloceanRegion {
  bool available = 1;

  repeated string features = 2;

  string id = 3;

  string name = 4;

  repeated string sizes = 5;

  string slug = 6;

  terraform.meta.MetaFields.DependsOnEntry depends_on = 7;

  int32 count = 8;

  terraform.meta.MetaFields.ForEachEntry for_each = 9;

  string provider = 10;

  terraform.meta.Lifecycle lifecycle = 11;
}

//DigitaloceanRegions version is 0
message DigitaloceanRegions {
  string id = 1;

  repeated Regions regions = 2;

  Filter filter = 3;

  Sort sort = 4;

  terraform.meta.MetaFields.DependsOnEntry depends_on = 5;

  int32 count = 6;

  terraform.meta.MetaFields.ForEachEntry for_each = 7;

  string provider = 8;

  terraform.meta.Lifecycle lifecycle = 9;

  message Regions {
    //available: bool
    bool available = 1;

    //features: set of string
    repeated string features = 2;

    //name: string
    string name = 3;

    //sizes: set of string
    repeated string sizes = 4;

    //slug: string
    string slug = 5;
  }

  message Filter {
    string key = 1;

    repeated string values = 2;
  }

  message Sort {
    string direction = 1;

    string key = 2;
  }
}

//DigitaloceanSizes version is 0
message DigitaloceanSizes {
  string id = 1;

  repeated Sizes sizes = 2;

  Filter filter = 3;

  Sort sort = 4;

  terraform.meta.MetaFields.DependsOnEntry depends_on = 5;

  int32 count = 6;

  terraform.meta.MetaFields.ForEachEntry for_each = 7;

  string provider = 8;

  terraform.meta.Lifecycle lifecycle = 9;

  message Sizes {
    //available: bool
    bool available = 1;

    //disk: number
    int64 disk = 2;

    //memory: number
    int64 memory = 3;

    //price_hourly: number
    int64 price_hourly = 4 [json_name = "price_hourly"];

    //price_monthly: number
    int64 price_monthly = 5 [json_name = "price_monthly"];

    //regions: set of string
    repeated string regions = 6;

    //slug: string
    string slug = 7;

    //transfer: number
    int64 transfer = 8;

    //vcpus: number
    int64 vcpus = 9;
  }

  message Filter {
    string key = 1;

    repeated string values = 2;
  }

  message Sort {
    string direction = 1;

    string key = 2;
  }
}

//DigitaloceanSshKey version is 0
message DigitaloceanSshKey {
  //fingerprint of the ssh key
  string fingerprint = 1;

  string id = 2;

  //name of the ssh key
  string name = 3;

  //public key part of the ssh key
  string public_key = 4 [json_name = "public_key"];

  terraform.meta.MetaFields.DependsOnEntry depends_on = 5;

  int32 count = 6;

  terraform.meta.MetaFields.ForEachEntry for_each = 7;

  string provider = 8;

  terraform.meta.Lifecycle lifecycle = 9;
}

//DigitaloceanTag version is 0
message DigitaloceanTag {
  string id = 1;

  //name of the tag
  string name = 2;

  terraform.meta.MetaFields.DependsOnEntry depends_on = 3;

  int32 count = 4;

  terraform.meta.MetaFields.ForEachEntry for_each = 5;

  string provider = 6;

  terraform.meta.Lifecycle lifecycle = 7;
}

//DigitaloceanVolume version is 0
message DigitaloceanVolume {
  //volume description
  string description = 1;

  //list of droplet ids the volume is attached to
  repeated int64 droplet_ids = 2 [json_name = "droplet_ids"];

  //the label currently applied to the filesystem
  string filesystem_label = 3 [json_name = "filesystem_label"];

  //the type of filesystem currently in-use on the volume
  string filesystem_type = 4 [json_name = "filesystem_type"];

  string id = 5;

  //name of the volume
  string name = 6;

  //the region that the volume is provisioned in
  string region = 7;

  //the size of the volume in gigabytes
  int64 size = 8;

  repeated string tags = 9;

  //the iniform resource name for the volume
  string urn = 10;

  terraform.meta.MetaFields.DependsOnEntry depends_on = 11;

  int32 count = 12;

  terraform.meta.MetaFields.ForEachEntry for_each = 13;

  string provider = 14;

  terraform.meta.Lifecycle lifecycle = 15;
}

//DigitaloceanVolumeSnapshot version is 0
message DigitaloceanVolumeSnapshot {
  string created_at = 1 [json_name = "created_at"];

  string id = 2;

  int64 min_disk_size = 3 [json_name = "min_disk_size"];

  bool most_recent = 4 [json_name = "most_recent"];

  string name = 5;

  string name_regex = 6 [json_name = "name_regex"];

  string region = 7;

  repeated string regions = 8;

  int64 size = 9;

  repeated string tags = 10;

  string volume_id = 11 [json_name = "volume_id"];

  terraform.meta.MetaFields.DependsOnEntry depends_on = 12;

  int32 count = 13;

  terraform.meta.MetaFields.ForEachEntry for_each = 14;

  string provider = 15;

  terraform.meta.Lifecycle lifecycle = 16;
}
