"""
ca.pinc
"""
load(
    "/terraform/tls-resources.proto",
    "TlsPrivateKey",
    "TlsSelfSignedCert",
    "TlsLocallySignedCert",
    "TlsCertRequest",
)
load("/terraform/tls-subject.proto", "TlsSubject")

PRIVATE_KEY = TlsPrivateKey(
    algorithm="ECDSA", ecdsa_curve="P384", rsa_bits=4096
)


def CA(tf, dns_names=["protoconf.com"]):
    tf.tls_private_key["root"] = TlsPrivateKey(
        algorithm="ECDSA", ecdsa_curve="P384"
    )
    tf.tls_self_signed_cert["root"] = TlsSelfSignedCert(
        allowed_uses=[
            "cert_signing",
            "key_encipherment",
            "digital_signature",
            "server_auth",
            "client_auth",
        ],
        key_algorithm="${tls_private_key.root.algorithm}",
        private_key_pem="${tls_private_key.root.private_key_pem}",
        is_ca_certificate=True,
        validity_period_hours=24 * 365 * 10,
        early_renewal_hours=24 * 365 * 5,
        dns_names=dns_names,
        subject=TlsSelfSignedCert.Subject(
            common_name=dns_names[0],
            organization="protoconf",
            organizational_unit="protocorp",
        ),
    )

    def server_cert(name, common_name=None, dns_names=[], ip_addresses=[]):
        if not common_name:
            common_name = name
        if not hasattr(tf.tls_private_key, name):
            tf.tls_private_key[name] = PRIVATE_KEY
            tf.tls_cert_request[name] = TlsCertRequest(
                key_algorithm="${tls_private_key.%s.algorithm}" % name,
                private_key_pem="${tls_private_key.%s.private_key_pem}" % name,
                dns_names=dns_names,
                ip_addresses=ip_addresses,
                subject=TlsCertRequest.Subject(common_name=common_name),
            )
            tf.tls_locally_signed_cert[name] = TlsLocallySignedCert(
                cert_request_pem="${tls_cert_request.%s.cert_request_pem}"
                % name,
                ca_key_algorithm="${tls_private_key.root.algorithm}",
                ca_private_key_pem="${tls_private_key.root.private_key_pem}",
                ca_cert_pem="${tls_self_signed_cert.root.cert_pem}",
                validity_period_hours=24 * 30 * 3,
                early_renewal_hours=24 * 30 * 1,
                allowed_uses=[
                    "key_encipherment",
                    "digital_signature",
                    "server_auth",
                    "client_auth",
                ],
            )
        return struct(
            private_key="tls_private_key.%s.private_key_pem" % name,
            certificate="tls_locally_signed_cert.%s.cert_pem" % name,
        )

    return struct(
        server_cert=server_cert, root_pem="tls_self_signed_cert.root.cert_pem"
    )
