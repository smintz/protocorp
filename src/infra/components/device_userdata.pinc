"""
UserMetaData
"""
load("base.pinc", "Base")
load("docker.pinc", "Docker")
load("consul.pinc", "Consul")
load("vault.pinc", "Vault")
load("nomad.pinc", "Nomad")
load("protoconf_binary.pinc", "ProtoconfBinary")
load("/pc4os/component.pinc", "Component", "String")


def DeviceUserDataFactory(ca, cluster, join=[], join_wan=[]):
    def DeviceUserData(nmd, advertise_addr="{{GetPublicIP}}"):
        """
        DeviceUserData will generate a userdata script for installing the instances

        Args:
            nmd: server name metadata factory
        Returns:
            DeviceUserData component
        """
        nomad_config = """\
advertise {{
    http = "{0}"
    rpc = "{0}"
    serf = "{0}"
}}
""".format(
            advertise_addr
        )

        if nmd.role == "server":
            vault = Vault(
                nmd, ca=ca, version=cluster.versions.vault_version, cluster=cluster
            )
        else:
            vault = String("")

        def render():
            return [
                String("#!/bin/bash"),
                String("export DEBIAN_FRONTEND=noninteractive"),
                Base(),
                Consul(
                    nmd.role,
                    nmd,
                    join_lan=join,
                    join_wan=join_wan + ["wan.protoconf.com"],
                    ca=ca,
                    version=cluster.versions.consul_version,
                    advertise_addr=advertise_addr,
                ),
                vault,
                Docker(),
                Nomad(
                    nmd.role,
                    nmd,
                    ca=ca,
                    additional_config=nomad_config,
                    version=cluster.versions.nomad_version,
                ),
                ProtoconfBinary(),
            ]

        return Component("DeviceUserData", render)

    return DeviceUserData
