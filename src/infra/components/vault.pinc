"""
vault.pinc
"""
load("/pc4os/component.pinc", "Component", "String")
load("/pc4os/file.pinc", "File", "Directory")
load("/pc4os/command.pinc", "Command")
load("/pc4os/systemd.pinc", "Systemd")
load("/pc4os/systemd.proto", "Service")
load("../helpers/get_cluster_name.pinc", "get_cluster_name")

VAULT_VERSION = "1.3.2"

VAULT_POST_START_SCRIPT = """\
#!/bin/bash

# This script will run after every time vault is started. It will try to:
# 1. Validate if vault is initialized
# 1.1. initialize vault and save the unseal keys in /root/vault_keys.json
# 1.2. write the root token into /root/.vault-token
# 2. Check if vault is sealed
# 2.1. Validate /root/vault_keys.json has unseal keys
# 2.2. Unseal vault

export VAULT_ADDR=https://127.0.0.1:8200
export KEYS_FILE=/tmp/vault_keys.json

vault_is_initialized() {
  curl -s $VAULT_ADDR/v1/sys/init | jq -e .initialized > /dev/null
  return $?
}

vault_is_sealed() {
  curl -s $VAULT_ADDR/v1/sys/health | jq -e .sealed > /dev/null
  return $?
}

initialize_vault() {
  curl -s $VAULT_ADDR/v1/sys/init -X PUT -d '{"secret_shares": 3, "secret_threshold": 3}' > $KEYS_FILE
  retval=$?
  return $retval
}

vault_root_login() {
  cat $KEYS_FILE | jq -r .root_token > /tmp/.vault-token
}

unseal_vault() {
  if jq -e "(.keys | length) > 0" $KEYS_FILE; then
    consul kv put vault_init @<(openssl aes-256-cbc -a -salt -in ${KEYS_FILE} -kfile /etc/vault.d/tls/consul_encrypt.key)
  else
    echo "Missing keys in $KEYS_FILE"
    consul kv get vault_init | openssl aes-256-cbc -d -a -kfile /etc/vault.d/tls/consul_encrypt.key > ${KEYS_FILE}
  fi
  COUNTER=0
  while vault_is_sealed; do
    _key=$(cat $KEYS_FILE | jq -r ".keys[${COUNTER}]")
    COUNTER=$((${COUNTER}+1))
    curl -s $VAULT_ADDR/v1/sys/unseal -X PUT -d "{\\"key\\":\\"${_key}\\"}"
  done
}

vault_is_up() {
  curl -s $VAULT_ADDR/v1/sys/health > /dev/null
}

wait_for_vault_server() {
  TIMEOUT_SECONDS=${1:-60}
  TIMEOUT_TIME=$(( ${TIMEOUT_SECONDS} + $(date +%s) ))
  until vault_is_up; do
    [ $(date +%s) -lt ${TIMEOUT_TIME} ] || exit 2
    sleep 1
  done
}

main() {
  wait_for_vault_server
  vault_is_initialized || initialize_vault
  unseal_vault || exit 0
  vault_root_login
  export VAULT_TOKEN=$(consul kv get vault_init | openssl aes-256-cbc -d -a -kfile /etc/vault.d/tls/consul_encrypt.key | jq -r '.root_token')
  vault policy write admin /etc/vault.d/scripts/admin.hcl
  vault policy write github-policy /etc/vault.d/scripts/github-policy.hcl
  vault auth enable cert
  vault write auth/cert/certs/terraform \
    display_name=terraform \
    policies=admin \
    certificate=@/etc/vault.d/tls/terraform.crt \
    ttl=3600
}

main
"""

VAULT_ADMIN_POLICY = """\
# Manage auth methods broadly across Vault
path "auth/*"
{
  capabilities = ["create", "read", "update", "delete", "list", "sudo"]
}

# Create, update, and delete auth methods
path "sys/auth/*"
{
  capabilities = ["create", "update", "delete", "sudo"]
}

# List auth methods
path "sys/auth"
{
  capabilities = ["read"]
}

# List existing policies
path "sys/policies/acl"
{
  capabilities = ["list"]
}

# Create and manage ACL policies
path "sys/policies/acl/*"
{
  capabilities = ["create", "read", "update", "delete", "list", "sudo"]
}

# List, create, update, and delete key/value secrets
path "kv/*"
{
  capabilities = ["create", "read", "update", "delete", "list", "sudo"]
}

# Manage secrets engines
path "sys/mounts/*"
{
  capabilities = ["create", "read", "update", "delete", "list", "sudo"]
}

# List existing secrets engines.
path "sys/mounts"
{
  capabilities = ["read"]
}

# Read health checks
path "sys/health"
{
  capabilities = ["read", "sudo"]
}
"""

VAULT_GITHUB_REPO_POLICY = """\
path "kv/github-creds" {
  capabilities = ["read"]
}
"""


def v(ver):
    return tuple(ver.split("."))


def VaultInstall(version):
    downloaded_file = "/tmp/vault-{}.zip".format(version)
    install = [
        File(
            downloaded_file,
            download="https://releases.hashicorp.com/vault/{0}/vault_{0}_linux_amd64.zip".format(
                version
            ),
        ),
        Command("unzip", "-x", downloaded_file, "-d", "/usr/local/bin"),
        Command("rm", downloaded_file),
        Command("vault", "-autocomplete-install"),
        Command("setcap", "cap_ipc_lock=+ep", "/usr/local/bin/vault"),
        Command(
            "useradd",
            "--system",
            "--home",
            "/etc/vault.d",
            "--shell",
            "/bin/false vault",
        ),
        Directory("/etc/vault.d", owner="vault", group="vault"),
    ]

    def render():
        return install

    return Component("VaultInstall", render)


def Vault(
    nmd, version=VAULT_VERSION, ca=None, cluster=None, advertize_addr=None
):
    """
    Vault defines and install the hashicorp's Vault server

    Args:
        nmd: NameMetadata
        version: The version to be installed
        ca: An instance of the root ca
        cluster: An instance of a cluster (optional)
        advertize_addr: Vault local address for consul advertizment
    Returns:
        a Component
    """
    setup = [VaultInstall(version)]

    if not advertize_addr:
        advertize_addr = nmd.fqdn

    vault_config = """\
ui = true
api_addr = "https://$advertize_addr:8200"
storage "consul" {
    path = "vault/"
}
"""
    vault_tls_config = """\
listener "tcp" {
  address       = "0.0.0.0:8200"
  tls_cert_file = "/etc/vault.d/tls/cert.pem"
  tls_key_file  = "/etc/vault.d/tls/key.pem"
}
"""
    vault_service_registration = """\
service_registration "consul" {
  address = "127.0.0.1:8500"
}
"""
    vault_gcp_unseal = """\
seal "gcpckms" {{
  project     = "protoconf"
  region      = "global"
  key_ring    = "{0}"
  crypto_key  = "{0}"
}}
""".format(
        "vault-" + cluster.region + get_cluster_name(cluster.cluster_number)
    )

    if ca:
        pki = ca.server_cert(
            nmd.tfid + "-vault",
            common_name=nmd.fqdn,
            dns_names=[
                nmd.hostname,
                nmd.fqdn,
                "vault.service.{}".format(nmd.domain),
                "vault.service.{}.{}".format(nmd.datacenter, nmd.domain),
                "localhost",
            ],
            ip_addresses=["127.0.0.1"],
        )
        vault_config = vault_config + vault_tls_config
        if v(version) >= v("1.4.1"):
            vault_config += vault_service_registration
        # if cluster and str(cluster.provider) == str(Cluster.Providers.GOOGLE):
        #     vault_config += vault_gcp_unseal
        vault_writer = ca.server_cert("vault-terraform")

        setup.extend(
            [
                Directory(
                    "/etc/vault.d/tls", mode="700", owner="vault", group="vault"
                ),
                File(
                    "/etc/vault.d/tls/key.pem",
                    "${%s}" % pki.private_key,
                    mode="600",
                    owner="vault",
                    group="vault",
                ),
                File(
                    "/etc/vault.d/tls/cert.pem",
                    "${%s}" % pki.certificate,
                    owner="vault",
                    group="vault",
                ),
                File(
                    "/etc/vault.d/tls/terraform.crt",
                    "${%s}" % vault_writer.certificate,
                    owner="vault",
                    group="vault",
                ),
                File(
                    "/etc/vault.d/tls/terraform.key",
                    "${%s}" % vault_writer.private_key,
                    owner="vault",
                    group="vault",
                ),
                File(
                    "/etc/vault.d/tls/consul_encrypt.key",
                    "${%s}" % ca.server_cert("consul-encrypt").private_key,
                    owner="vault",
                    group="vault",
                    mode="0600",
                ),
            ]
        )

    setup.extend(
        [
            String(
                "export advertize_addr=$(ip -o route get 10.0.0.0 | awk '{print $7}')"
            ),
            File("/etc/vault.d/vault.hcl", content=vault_config),
            Directory(
                "/etc/vault.d/scripts",
                owner="vault",
                group="vault",
                mode="0755",
            ),
            File(
                "/etc/vault.d/scripts/post_start.sh",
                content=VAULT_POST_START_SCRIPT,
                owner="vault",
                group="vault",
                mode="0755",
                b64_escape=True,
            ),
            File(
                "/etc/vault.d/scripts/admin.hcl",
                content=VAULT_ADMIN_POLICY,
                owner="vault",
                group="vault",
            ),
            File(
                "/etc/vault.d/scripts/github-policy.hcl",
                content=VAULT_GITHUB_REPO_POLICY,
                owner="vault",
                group="vault",
            ),
            Systemd(
                "vault",
                Service(
                    User="vault",
                    Group="vault",
                    ProtectSystem="full",
                    ProtectHome="read-only",
                    PrivateTmp="yes",
                    PrivateDevices="yes",
                    SecureBits="keep-caps",
                    AmbientCapabilities="CAP_IPC_LOCK",
                    Capabilities="CAP_IPC_LOCK+ep",
                    CapabilityBoundingSet="CAP_SYSLOG CAP_IPC_LOCK",
                    NoNewPrivileges="yes",
                    ExecStart="/usr/local/bin/vault server -config=/etc/vault.d/vault.hcl",
                    ExecStartPost="/etc/vault.d/scripts/post_start.sh",
                    ExecReload="/bin/kill --signal HUP $MAINPID",
                    KillMode="process",
                    KillSignal="SIGINT",
                    Restart="on-failure",
                    RestartSec="5",
                    TimeoutStopSec=30,
                    # StartLimitInterval=60,
                    # StartLimitIntervalSec=60,
                    # StartLimitBurst=3,
                    LimitNOFILE="65536",
                    LimitMEMLOCK="infinity",
                ),
            ),
        ]
    )

    def render():
        return setup

    return Component("Vault", render)
