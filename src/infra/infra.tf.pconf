# vi:filetype=python syntax=python
"""
This is the entrypoint of the terraform file.
"""
load("/terraform/terraform.proto", "Terraform")
load(
    "/terraform/digitalocean-resources.proto",
    "DigitaloceanDroplet",
    "DigitaloceanSshKey",
)
load("/terraform/random-resources.proto", "RandomPet")
load("/terraform/meta.proto", "Lifecycle")
load("installers/base.pinc", "INSTALL_BASE")
load("installers/docker.pinc", "INSTALL_DOCKER")
load("installers/consul.pinc", "consul_setup")
load("installers/nomad.pinc", "nomad_setup")
load("/employees/employees.pinc", "EMPLOYEES")

COUNTER = 5
SERVERS = 5
CLIENTS = 0

CONSUL_JOIN_ARGS = {
    "digitalocean": """-retry-join 'provider=digitalocean api_token={token} region={dc} tag_name=server'""",
    # Will support more providers later
}

TOKENS = {"digitalocean": "${var.digitalocean_token}"}


def set_ssh_keys(tf, provider):
    for e in EMPLOYEES:
        key_counter = 0
        for key in e.ssh_keys:
            key_name = "%s-%d" % (e.unix_name, key_counter)
            if provider == "digitalocean":
                tf.digitalocean_ssh_key[key_name] = DigitaloceanSshKey(
                    name=key_name, public_key=key
                )
            key_counter = key_counter + 1


def create_droplet(tf, hostname, role="server", dc="ams3", user_data=""):
    return DigitaloceanDroplet(
        name=hostname,
        image="ubuntu-18-04-x64",
        region=dc,
        size="s-1vcpu-1gb",
        ssh_keys=[
            "${digitalocean_ssh_key.%s.id}" % keyname
            for keyname in tf.digitalocean_ssh_key.keys()
        ],
        tags=[role],
        private_networking=True,
        user_data=user_data,
        lifecycle=Lifecycle(ignore_changes=["user_data"]),
    )


CREATE_FUNCS = {"digitalocean": create_droplet}


def create_device(tf, name, role, dc, provider):
    """
    create_device adds devices and their "pet" names to the terraform object
    Args:
        tf: The terraform protobuf object
        name: Name of the terraform key to be used as resource ids.
        role: Role of the server, either `server` or `client`
        dc: The datacenter to deploy the device in.
        provider: The cloud provider to use
    """

    nomad_config = """\
advertise {
    http = "{{GetPublicIP}}"
    rpc = "{{GetPublicIP}}"
    serf = "{{GetPublicIP}}"
}
"""
    tf.random_pet[name] = RandomPet()
    user_data = (
        INSTALL_BASE
        + INSTALL_DOCKER
        + consul_setup(
            role, dc, CONSUL_JOIN_ARGS[provider].format(dc=dc, token=TOKENS[provider])
        )
        + nomad_setup(
            role,
            dc,
            CONSUL_JOIN_ARGS[provider].format(dc=dc, token=TOKENS[provider]),
            config=nomad_config,
        )
    )
    tf.digitalocean_droplet[name] = CREATE_FUNCS[provider](
        tf, "${random_pet.%s.id}" % name, role, dc, user_data
    )


def main():
    """
    Entrypoint function

    Returns:
        Terraform object to compile
    """
    tf = Terraform(resource=Terraform.Resources())
    provider = "digitalocean"
    set_ssh_keys(tf.resource, provider)
    for dc in ["ams3"]:
        for i in range(COUNTER + 0, COUNTER + SERVERS):
            create_device(tf.resource, "server%s%d" % (dc, i), "server", dc, provider)
        for i in range(COUNTER + 0, COUNTER + CLIENTS):
            create_device(tf.resource, "client%s%d" % (dc, i), "client", dc, provider)

    return tf
