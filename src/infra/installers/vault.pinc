"""
vault.pinc
"""
load("/pc4os/component.pinc", "Component")
load("/pc4os/file.pinc", "File", "Directory")
load("/pc4os/command.pinc", "Command")
load("/pc4os/systemd.pinc", "Systemd")
load("/pc4os/systemd.proto", "Service")

VAULT_VERSION = "1.3.2"


def VaultInstall(version):
    downloaded_file = "/tmp/vault-{}.zip".format(version)
    install = [
        File(
            downloaded_file,
            download="https://releases.hashicorp.com/vault/{0}/vault_{0}_linux_amd64.zip".format(
                version
            ),
        ),
        Command("unzip", "-x", downloaded_file, "-d", "/usr/local/bin"),
        Command("rm", downloaded_file),
        Command("vault", "-autocomplete-install"),
        Command("setcap", "cap_ipc_lock=+ep", "/usr/local/bin/vault"),
        Command(
            "useradd",
            "--system",
            "--home",
            "/etc/vault.d",
            "--shell",
            "/bin/false vault",
        ),
        Directory("/etc/vault.d", owner="vault", group="vault"),
    ]

    def render():
        return install

    return Component("VaultInstall", render)


def Vault(nmd, version=VAULT_VERSION, ca=None):
    """
    Vault defines and install the hashicorp's Vault server

    Args:
        nmd: NameMetadata
        version: The version to be installed
        ca: An instance of the root ca
    Returns:
        a Component
    """
    setup = [VaultInstall(version)]

    if ca:
        pki = ca.server_cert(
            nmd.tfid + "-vault",
            common_name=nmd.fqdn,
            dns_names=[
                nmd.hostname,
                nmd.fqdn,
                "vault.service.{}".format(nmd.domain),
                "vault.service.{}.{}".format(nmd.dc, nmd.domain),
                "localhost",
            ],
            ip_addresses=["127.0.0.1"],
        )
        setup.extend(
            [
                Directory("/etc/vault.d/tls"),
                File(
                    "/etc/vault.d/tls/key.pem",
                    "${%s}" % pki.private_key,
                    mode="600",
                    owner="vault",
                    group="vault",
                ),
                File(
                    "/etc/vault.d/tls/cert.pem",
                    "${%s}" % pki.certificate,
                    owner="vault",
                    group="vault",
                ),
                File(
                    "/etc/vault.d/vault.hcl",
                    """\
ui = true
storage "consul" {
    path = "vault/"
}
""",
                ),
                File(
                    "/etc/vault.d/tls.hcl",
                    """\
listener "tcp" {
  address       = "0.0.0.0:8200"
  tls_cert_file = "/etc/vault.d/tls/cert.pem"
  tls_key_file  = "/etc/vault.d/tls/key.pem"
}
""",
                ),
            ]
        )

    setup.append(
        Systemd(
            "vault",
            Service(
                User="vault",
                Group="vault",
                ProtectSystem="full",
                ProtectHome="read-only",
                PrivateTmp="yes",
                PrivateDevices="yes",
                SecureBits="keep-caps",
                AmbientCapabilities="CAP_IPC_LOCK",
                Capabilities="CAP_IPC_LOCK+ep",
                CapabilityBoundingSet="CAP_SYSLOG CAP_IPC_LOCK",
                NoNewPrivileges="yes",
                ExecStart="/usr/local/bin/vault server -config=/etc/vault.d/vault.hcl",
                ExecReload="/bin/kill --signal HUP $MAINPID",
                KillMode="process",
                KillSignal="SIGINT",
                Restart="on-failure",
                RestartSec="5",
                TimeoutStopSec=30,
                StartLimitInterval=60,
                StartLimitIntervalSec=60,
                StartLimitBurst=3,
                LimitNOFILE="65536",
                LimitMEMLOCK="infinity",
            ),
        )
    )

    def render():
        return setup

    return Component("Vault", render)
