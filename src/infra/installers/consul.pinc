"""
This file contains constants and functions to assist with instance installations.
"""
# vi:filetype=python syntax=python
load("/pc4os/component.pinc", "Component")
load("/pc4os/file.pinc", "File", "Directory")
load("/pc4os/command.pinc", "Command")
load("/pc4os/systemd.pinc", "Systemd")
load("/pc4os/systemd.proto", "Service", "Unit")


def ConsulInstall(version):
    downloaded_file = "/tmp/consul-{}.zip".format(version)
    install = [
        Command("useradd --system --home /etc/consul.d --shell /bin/false consul"),
        Directory("/etc/consul.d"),
        Directory("/opt/consul", owner="consul", group="consul"),
        File(
            downloaded_file,
            download="https://releases.hashicorp.com/consul/{0}/consul_{0}_linux_amd64.zip".format(
                version
            ),
        ),
        Command("unzip", "-x", downloaded_file, "-d", "/usr/local/bin"),
        Command("rm", downloaded_file),
        Command("consul", "-autocomplete-install"),
        Command("complete", "-C", "/usr/local/bin/consul", "consul"),
    ]

    def render():
        return install

    return Component("ConsulInstall", render)


def Consul(role="server", dc="dc1", join_lan=[], join_wan=[], ca=None):
    """
    Defines the installation of consul

    Args:
        role: either `server` or `client`
        dc: Name of the datacenter
        join_lan: list of servers or discovery expressions to join via lan
        join_wan: list of servers or discovery expressions to join via wan
        ca: a facility to create certificates
    Returns:
        Installation and configuration script for the consul agent.
    """

    setup = [
        ConsulInstall("1.7.1"),
        File(
            "/etc/consul.d/config.hcl",
            mode="0640",
            owner="consul",
            group="consul",
            content="\n".join(
                [
                    "ui = true",
                    'bind_addr = "0.0.0.0"',
                    'advertise_addr = "{{GetPublicIP}}"',
                    'datacenter = "{}"'.format(dc),
                    'data_dir = "/opt/consul"',
                ]
            ),
        ),
    ]
    if role == "server":
        setup.append(
            File(
                "/etc/consul.d/server.hcl",
                mode="0640",
                owner="consul",
                group="consul",
                content="""server = true\nbootstrap_expect = 3""",
            )
        )

    if ca:
        pki = ca.server_cert("consul", ip_addresses=["127.0.0.1"])
        setup.extend(
            [
                File("/usr/share/ca-certificates/consul.pem", "${%s}" % ca.root_pem),
                Command("update-ca-certificates"),
                Directory("/etc/consul.d/tls"),
                File(
                    "/etc/consul.d/tls/key.pem",
                    "${%s}" % pki.private_key,
                    mode="600",
                    owner="consul",
                    group="consul",
                ),
                File(
                    "/etc/consul.d/tls/cert.pem",
                    "${%s}" % pki.certificate,
                    owner="consul",
                    group="consul",
                ),
                File(
                    "/etc/consul.d/tls.hcl",
                    """\
key_file = "/etc/consul.d/tls/key.pem"
cert_file = "/etc/consul.d/tls/cert.pem"
ca_file = "/usr/share/ca-certificates/consul.pem"
""",
                ),
            ]
        )

    if len(join_lan) > 0:
        setup.append(
            File(
                "/etc/consul.d/join_lan.hcl",
                mode="0640",
                owner="consul",
                group="consul",
                content="retry_join = [{}]".format(
                    ",".join(['"{}"'.format(s) for s in join_lan])
                ),
            )
        )

    if len(join_wan) > 0:
        setup.append(
            File(
                "/etc/consul.d/join_wan.hcl",
                mode="0640",
                owner="consul",
                group="consul",
                content="""retry_join_wan = [{}]""".format(
                    ",".join(['"{}"'.format(s) for s in join_wan])
                ),
            )
        )

    setup.append(
        Systemd(
            "consul",
            Service(
                Type="notify",
                User="consul",
                Group="consul",
                ExecStart=" ".join(
                    ["/usr/local/bin/consul", "agent", "-config-dir=/etc/consul.d/"]
                ),
                ExecReload="/usr/local/bin/consul reload",
                KillMode="process",
                Restart="on-failure",
                LimitNOFILE="65536",
            ),
            unit=Unit(
                Description="HashiCorp Consul - A service mesh solution",
                Documentation="https://www.consul.io/",
                Requires="network-online.target",
                After="network-online.target",
            ),
        )
    )

    def render():
        return setup

    return Component("Consul", render)
