"""
Google Cloud
"""
load("../base.pinc", "BaseClusterInterface")
load(
    "/terraform/google-resources.proto",
    "GoogleComputeInstance",
    "GoogleComputeInstanceTemplate",
    "GoogleComputeRegionInstanceGroupManager",
    "GoogleKmsCryptoKey",
    "GoogleKmsKeyRing",
    "GoogleKmsKeyRingIamBinding",
    "GoogleServiceAccount",
)
load( "../../consts.pinc", "COUNTER")
load("/pc4os/pc4os.pinc", "compile")
load("../../helpers/server_name_metadata.pinc", "ServerNameMetadata")
load("../../helpers/get_cluster_name.pinc", "get_cluster_name")
load("/terraform/meta.proto", "Lifecycle")


def GoogleCluster(tf, cluster):
    """
    GoogleCluster provisions a cluster on GCP

    Args:
        tf: An instance of Terraform.Resource
        cluster: An instance of Cluster
    Returns:
        ClusterProviderInterface
    """
    # key_ring_name = "vault-" + cluster.region + get_cluster_name(cluster.cluster_number)
    # tf.google_service_account["vault_kms_service_account"] = GoogleServiceAccount(
    #     account_id="vault-gcpkms", display_name="Vault KMS for auto-unseal"
    # )
    # tf.google_kms_key_ring[key_ring_name] = GoogleKmsKeyRing(
    #     name=key_ring_name, location="global"
    # )
    # tf.google_kms_crypto_key[key_ring_name] = GoogleKmsCryptoKey(
    #     name=key_ring_name,
    #     key_ring="${google_kms_key_ring.%s.self_link}" % key_ring_name,
    #     rotation_period="100000s",
    # )
    # tf.google_kms_key_ring_iam_binding[key_ring_name] = GoogleKmsKeyRingIamBinding(
    #     key_ring_id="${google_kms_key_ring.%s.id}" % key_ring_name,
    #     role="roles/owner",
    #     members=[
    #         "serviceAccount:${google_service_account.vault_kms_service_account.email}"
    #     ],
    # )

    def get_instance_size(nmd):
        tiers = [t for t in cluster.tiers if t.name == nmd.role]
        size = tiers[0].instance_type
        if not size:
            return "n1-standard-1"
        return size

    def create_instance(nmd, userdata):
        instance = GoogleComputeInstance(
            name=nmd.hostname,
            hostname=nmd.fqdn,
            zone=nmd.region + "-" + ["a", "b", "c"][nmd.id % 3],
            machine_type=get_instance_size(nmd),
            tags=[nmd.role],

            metadata_startup_script=compile(userdata(nmd, "{{GetPrivateIP}}")),
            scheduling=GoogleComputeInstance.Scheduling(
                automatic_restart=True, on_host_maintenance="MIGRATE", preemptible=False
            ),
            boot_disk=GoogleComputeInstance.BootDisk(
                auto_delete=True,
                initialize_params=GoogleComputeInstance.BootDisk.InitializeParams(
                    image="ubuntu-os-cloud/ubuntu-1804-lts",
                )
            ),
            network_interface=GoogleComputeInstance.NetworkInterface(network="default"),
            lifecycle=Lifecycle(create_before_destroy=True),
        )
        tf.google_compute_instance[nmd.tfid] = instance

    def create_tier(tier, userdata):
        if tier.name == "server":
            for i in range(COUNTER + 0, COUNTER + tier.count):
                nmd = ServerNameMetadata(tf).create(tier.name, i, cluster.region, get_cluster_name(cluster.cluster_number))
                create_instance(nmd, userdata)
        else:
            create_tier_local(tier, userdata)
    

    def create_tier_local(tier, userdata):
        nmd = ServerNameMetadata(tf).create(
            tier.name, 0, cluster.region, get_cluster_name(cluster.cluster_number)
        )

        tf.google_compute_region_instance_group_manager[
            tier.name
        ] = GoogleComputeRegionInstanceGroupManager(
            name=tier.name,
            base_instance_name=tier.name,
            region=cluster.region,
            target_pools=[],
            target_size=tier.count,
            update_policy=GoogleComputeRegionInstanceGroupManager.UpdatePolicy(
                max_surge_fixed=int(tier.count // 3)
                if tier.count < 10 and tier.count >= 3 * 3
                else 0,
                max_surge_percent=33 if tier.count >= 10 else 0,
                max_unavailable_fixed=int(tier.count // 3)
                if tier.count < 10 and tier.count >= 3 * 3
                else 0,
                max_unavailable_percent=33 if tier.count >= 10 else 0,
                min_ready_sec=30,
                minimal_action="REPLACE",
                type="PROACTIVE",
            ),
            version=GoogleComputeRegionInstanceGroupManager.Version(
                instance_template="${google_compute_instance_template.%s.self_link}"
                % tier.name
            ),
        )
        svc_account = GoogleComputeInstanceTemplate.ServiceAccount(
            scopes=[
                "https://www.googleapis.com/auth/userinfo.email",
                "https://www.googleapis.com/auth/compute.readonly",
            ]
        )
        if tier.name == "server":
            svc_account = GoogleComputeInstanceTemplate.ServiceAccount(
                email="${google_service_account.vault_kms_service_account.email}",
                scopes=["cloud-platform", "compute-rw", "userinfo-email", "storage-ro"],
            )

        tf.google_compute_instance_template[tier.name] = GoogleComputeInstanceTemplate(
            name_prefix=tier.name,
            machine_type=get_instance_size(nmd),
            tags=[tier.name],
            metadata_startup_script=compile(userdata(nmd, "{{GetPrivateIP}}")),
            scheduling=GoogleComputeInstanceTemplate.Scheduling(
                automatic_restart=True, on_host_maintenance="MIGRATE", preemptible=False
            ),
            disk=GoogleComputeInstanceTemplate.Disk(
                boot=True,
                auto_delete=True,
                source_image="ubuntu-os-cloud/ubuntu-1804-lts",
            ),
            network_interface=GoogleComputeInstanceTemplate.NetworkInterface(
                network="default"
            ),
            service_account=svc_account,
            lifecycle=Lifecycle(create_before_destroy=True),
        )

    return BaseClusterInterface(
        tf,
        create_tier_func=create_tier,
        join="provider=gce tag_value=server zone_pattern={}.*".format(cluster.region),
    )

