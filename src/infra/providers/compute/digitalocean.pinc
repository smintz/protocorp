"""
DigitalOcean
"""
load("../base.pinc", "BaseClusterInterface")
load("/terraform/meta.proto", "Lifecycle")
load("/terraform/digitalocean-resources.proto", "DigitaloceanDroplet")
load("../../helpers/server_name_metadata.pinc", "ServerNameMetadata")
load("../../helpers/get_cluster_name.pinc", "get_cluster_name")
load(
    "../../consts.pinc",
    "COUNTER",
    "CLOUDFLARE_INTERNAL_DOMAIN_ID",
    "CLOUDFLARE_EXTERNAL_DOMAIN_ID",
)
load("../dns/cloudflare_dns.pinc", "CloudflareDNS")
load("/pc4os/pc4os.pinc", "compile")


def DigitalOceanCluster(tf, cluster):
    """
    DigitalOceanCluster is an instance of helpers to create a cluster on the DigitalOcean cloud provider

    Args:
        tf: an instance of Terraform.Resource
        cluster: a Cluster instance
    Returns:
        a BaseClusterInterface instance
    """
    global_dns = CloudflareDNS(tf, CLOUDFLARE_INTERNAL_DOMAIN_ID)
    cluster_dns = CloudflareDNS(
        tf,
        CLOUDFLARE_INTERNAL_DOMAIN_ID,
        cluster.region + get_cluster_name(cluster.cluster_number),
    )
    global_dns = CloudflareDNS(tf, CLOUDFLARE_EXTERNAL_DOMAIN_ID)

    def get_instance_size(nmd):
        tiers = [t for t in cluster.tiers if t.name == nmd.role]
        size = tiers[0].instance_type
        if not size:
            return "s-2vcpu-4gb"
        return size

    def create_droplet(nmd, user_data=None):
        userdata = ""
        if user_data:
            userdata = compile(user_data(nmd))

        droplet = DigitaloceanDroplet(
            name=nmd.hostname,
            image="ubuntu-18-04-x64",
            region=nmd.region,
            # size="s-1vcpu-1gb",
            size=get_instance_size(nmd),
            ssh_keys=[
                "${digitalocean_ssh_key.%s.id}" % keyname
                for keyname in tf.digitalocean_ssh_key.keys()
            ],
            tags=[nmd.role, nmd.cluster_name],
            private_networking=True,
            user_data=userdata,
        )
        if nmd.id > COUNTER:
            droplet.lifecycle = Lifecycle(
                ignore_changes=["user_data"], create_before_destroy=True
            )
        tf.digitalocean_droplet[nmd.tfid] = droplet
        return droplet

    def create_tier(tier, userdata):
        instances_nmd = [
            ServerNameMetadata(tf).create(
                tier.name,
                i,
                cluster.region,
                get_cluster_name(cluster.cluster_number),
            )
            for i in range(COUNTER + 0, COUNTER + tier.count)
        ]

        if tier.name == "server":
            if tier.count not in [3, 5, 7]:
                fail(
                    "servers_count must be one of 3, 5 or 7 (got: %d)"
                    % cluster.servers_count
                )

            for nmd in instances_nmd:
                for svc in ["consul", "nomad", "vault"]:
                    cluster_dns.CreateEntry(
                        nmd.tfid + "-" + svc,
                        svc + ".service",
                        "${digitalocean_droplet.%s.ipv4_address}" % nmd.tfid,
                        ttl=1,
                    )
                global_dns.CreateEntry(
                    nmd.tfid + "-wan",
                    "wan",
                    "${digitalocean_droplet.%s.ipv4_address}" % nmd.tfid,
                )

        for nmd in instances_nmd:
            cluster_dns.CreateEntry(
                nmd.tfid,
                nmd.hostname + ".node",
                "${digitalocean_droplet.%s.ipv4_address}" % nmd.tfid,
            )
            cluster_dns.CreateEntry(
                nmd.tfid + "-star",
                "*.service",
                "${digitalocean_droplet.%s.ipv4_address}" % nmd.tfid,
            )
            global_dns.CreateEntry(
                nmd.tfid + "-global",
                "*.service",
                "${digitalocean_droplet.%s.ipv4_address}" % nmd.tfid,
            )
            create_droplet(nmd, userdata)

    return BaseClusterInterface(
        tf,
        create_instance_func=create_droplet,
        create_tier_func=create_tier,
        join="provider=digitalocean api_token=${{var.digitalocean_token}} region={} tag_name=server".format(
            cluster.region
        ),
    )
