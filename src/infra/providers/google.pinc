"""
Google Cloud
"""
load("base.pinc", "BaseClusterInterface")
load(
    "/terraform/google-resources.proto",
    "GoogleComputeRegionInstanceGroupManager",
    "GoogleComputeInstanceTemplate",
    "GoogleServiceAccount",
    "GoogleKmsKeyRing",
    "GoogleKmsCryptoKey",
    "GoogleKmsKeyRingIamBinding",
)
load("/pc4os/pc4os.pinc", "compile")
load("../helpers/server_name_metadata.pinc", "ServerNameMetadata")
load("../helpers/get_cluster_name.pinc", "get_cluster_name")
load("/terraform/meta.proto", "Lifecycle")


def GoogleCluster(tf, cluster):
    key_ring_name = "vault-" + cluster.region + get_cluster_name(cluster.cluster_number)
    tf.google_service_account["vault_kms_service_account"] = GoogleServiceAccount(
        account_id="vault-gcpkms", display_name="Vault KMS for auto-unseal"
    )
    tf.google_kms_key_ring[key_ring_name] = GoogleKmsKeyRing(
        name=key_ring_name, location="global"
    )
    tf.google_kms_crypto_key[key_ring_name] = GoogleKmsCryptoKey(
        name=key_ring_name,
        key_ring="${google_kms_key_ring.%s.self_link}" % key_ring_name,
        rotation_period="100000s",
    )
    tf.google_kms_key_ring_iam_binding[key_ring_name] = GoogleKmsKeyRingIamBinding(
        key_ring_id="${google_kms_key_ring.%s.id}" % key_ring_name,
        role="roles/owner",
        members=[
            "serviceAccount:${google_service_account.vault_kms_service_account.email}"
        ],
    )

    def create_tier(tier, userdata):
        nmd = ServerNameMetadata(tf).create(
            tier.name, 0, cluster.region, get_cluster_name(cluster.cluster_number)
        )
        tf.google_compute_region_instance_group_manager[
            tier.name
        ] = GoogleComputeRegionInstanceGroupManager(
            name=tier.name,
            base_instance_name=tier.name,
            region=cluster.region,
            target_pools=[],
            target_size=tier.count,
            version=GoogleComputeRegionInstanceGroupManager.Version(
                instance_template="${google_compute_instance_template.%s.self_link}"
                % tier.name
            ),
        )
        svc_account = GoogleComputeInstanceTemplate.ServiceAccount(
            scopes=[
                "https://www.googleapis.com/auth/userinfo.email",
                "https://www.googleapis.com/auth/compute.readonly",
            ]
        )
        if tier == "server":
            svc_account = GoogleComputeInstanceTemplate.ServiceAccount(
                email="${google_service_account.vault_kms_service_account.email}",
                scopes=[
                    "cloud-platform",
                    "compute-rw",
                    "userinfo-email",
                    "storage-ro",
                    "https://www.googleapis.com/auth/userinfo.email",
                    "https://www.googleapis.com/auth/compute.readonly",
                ],
            )

        tf.google_compute_instance_template[tier.name] = GoogleComputeInstanceTemplate(
            name_prefix=tier.name,
            machine_type=tier.instance_type,
            tags=[tier.name],
            metadata_startup_script=compile(userdata(nmd, "{{GetPrivateIP}}")),
            scheduling=GoogleComputeInstanceTemplate.Scheduling(
                automatic_restart=True, on_host_maintenance="MIGRATE", preemptible=False
            ),
            disk=GoogleComputeInstanceTemplate.Disk(
                boot=True,
                auto_delete=True,
                source_image="ubuntu-os-cloud/ubuntu-1804-lts",
            ),
            network_interface=GoogleComputeInstanceTemplate.NetworkInterface(
                network="default"
            ),
            service_account=svc_account,
            lifecycle=Lifecycle(create_before_destroy=True),
        )

    return BaseClusterInterface(
        tf,
        create_tier_func=create_tier,
        join="provider=gce tag_value=server zone_pattern={}.*".format(cluster.region),
    )


# def create_gcp_vm(tf, nmd, user_data=""):
#     vm = GoogleComputeInstance(
#         name=nmd.hostname,
#         machine_type="f1-micro",
#         zone=nmd.region + "-a",
#         labels={"role": nmd.role, "cluster": nmd.cluster_name},
#         tags=[nmd.role, nmd.cluster_name],
#         metadata_startup_script=user_data,
#         boot_disk=[
#             GoogleComputeInstance.BootDisk(
#                 initialize_params=[
#                     GoogleComputeInstance.BootDisk.InitializeParams(
#                         image="ubuntu-os-cloud/ubuntu-1804-lts"
#                     )
#                 ]
#             )
#         ],
#         network_interface=[GoogleComputeInstance.NetworkInterface(network="default")],
#     )
#     if nmd.id > COUNTER:
#         vm.lifecycle = Lifecycle(
#             ignore_changes=["metadata_startup_script"], create_before_destroy=True
#         )
#     return vm
