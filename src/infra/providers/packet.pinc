"""
packet
"""
load("base.pinc", "BaseClusterInterface")
load("/terraform/meta.proto", "Lifecycle")
load("/terraform/packet-resources.proto", "PacketDevice")
load("../helpers/server_name_metadata.pinc", "ServerNameMetadata")
load("../helpers/get_cluster_name.pinc", "get_cluster_name")
load("../consts.pinc", "COUNTER", "CF_PCO_NF_ID", "CF_PROTOCONF_COM_ID")
load("cloudflare_dns.pinc", "CloudflareDNS")
load("/pc4os/pc4os.pinc", "compile")


def PacketCluster(tf, cluster):
    """
    PacketCluster is an instance of helpers to create a cluster on the packet cloud provider

    Args:
        tf: an instance of Terraform.Resource
        cluster: a Cluster instance
    Returns:
        a BaseClusterInterface instance
    """
    cluster_dns = CloudflareDNS(
        tf, CF_PCO_NF_ID, cluster.region + get_cluster_name(cluster.cluster_number)
    )
    global_dns = CloudflareDNS(tf, CF_PROTOCONF_COM_ID)

    def get_instance_size(nmd):
        tiers = [t for t in cluster.tiers if t.name == nmd.role]
        size = tiers[0].instance_type
        if not size:
            return "c1.small.x86"
        return size

    def create_instance(nmd, user_data=None):
        userdata = ""
        if user_data:
            userdata = compile(user_data(nmd))
        device = PacketDevice(
            hostname=nmd.hostname,
            operating_system="ubuntu_18_04",
            facilities=[nmd.region],
            plan=get_instance_size(nmd),
            tags=[nmd.role, nmd.cluster_name],
            user_data=userdata,
            project_id="${var.packet_project_id}",
            billing_cycle="hourly",
        )
        if nmd.id > COUNTER:
            device.lifecycle = Lifecycle(
                ignore_changes=["user_data"], create_before_destroy=True
            )
        tf.packet_device[nmd.tfid] = device

    def create_tier(tier, userdata):
        instances_nmd = [
            ServerNameMetadata(tf).create(
                tier.name, i, cluster.region, get_cluster_name(cluster.cluster_number)
            )
            for i in range(COUNTER + 0, COUNTER + tier.count)
        ]

        if tier.name == "server":
            if tier.count not in [3, 5, 7]:
                fail(
                    "servers_count must be one of 3, 5 or 7 (got: %d)"
                    % cluster.servers_count
                )

            for nmd in instances_nmd:
                for svc in ["consul", "nomad", "vault"]:
                    cluster_dns.CreateEntry(
                        nmd.tfid + "-" + svc,
                        svc + ".service",
                        "${packet_device.%s.access_public_ipv4}" % nmd.tfid,
                        ttl=1,
                    )
                global_dns.CreateEntry(
                    nmd.tfid + "-wan",
                    "wan",
                    "${packet_device.%s.access_public_ipv4}" % nmd.tfid,
                )

        for nmd in instances_nmd:
            cluster_dns.CreateEntry(
                nmd.tfid,
                nmd.hostname + ".node",
                "${packet_device.%s.access_public_ipv4}" % nmd.tfid,
            )
            cluster_dns.CreateEntry(
                nmd.tfid + "-star",
                "*.service",
                "${packet_device.%s.access_public_ipv4}" % nmd.tfid,
            )
            create_instance(nmd, userdata)

    return BaseClusterInterface(
        tf,
        create_instance_func=create_instance,
        create_tier_func=create_tier,
        join="provider=packet auth_token=${{var.packet_auth_token}} project={} facility={} tag=server".format(
            "${var.packet_project_id}", cluster.region
        ),
    )
