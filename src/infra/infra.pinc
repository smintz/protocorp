# vi:filetype=python syntax=python
"""
This is the entrypoint of the terraform file.
"""
load("/terraform/terraform.proto", "Terraform")
load(
    "/terraform/digitalocean-resources.proto",
    "DigitaloceanDroplet",
    "DigitaloceanSshKey",
)
load("/terraform/random-resources.proto", "RandomPet")
load("/terraform/meta.proto", "Lifecycle")
load("installers/base.pinc", "Base")
load("installers/docker.pinc", "Docker")
load("installers/consul.pinc", "Consul")
load("installers/nomad.pinc", "Nomad")
load("ca.pinc", "CA")
load("/employees/employees.pinc", "EMPLOYEES")
load("/pc4os/pc4os.pinc", "compile")
load("/pc4os/component.pinc", "Component", "String")

COUNTER = 0
SERVERS = 3
CLIENTS = 0

CONSUL_DOMAIN = "pco.nf"

tf = Terraform(resource=Terraform.Resources())
ca = CA(tf.resource)
provider = "digitalocean"
CONSUL_JOIN_ARGS = {
    "digitalocean": "provider=digitalocean api_token={token} region={dc} tag_name=server",
    # Will support more providers later
}

TOKENS = {"digitalocean": "${var.digitalocean_token}"}


def set_ssh_keys(tf, provider):
    """
    set_ssh_keys adds ssh keys of protocorp's employees to our provider project

    Args:
        tf: an instance of Terraform.Resource 
        provider: the provider type (digitalocean)
    """
    for e in EMPLOYEES:
        key_counter = 0
        for key in e.ssh_keys:
            key_name = "%s-%d" % (e.unix_name, key_counter)
            if provider == "digitalocean":
                tf.digitalocean_ssh_key[key_name] = DigitaloceanSshKey(
                    name=key_name, public_key=key
                )
            key_counter = key_counter + 1


set_ssh_keys(tf.resource, provider)


def ServerNameMetadata(tf):
    def create(role, id, region, cluster):
        tfid = "-".join([role, str(id), region, cluster])
        tf.random_pet[tfid] = RandomPet()
        hostname = "${random_pet.%s.id}" % tfid
        dc = region + cluster
        fqdn = "{}.node.{}.{}".format(hostname, dc, CONSUL_DOMAIN)
        return struct(
            cluster=cluster,
            dc=dc,
            domain=CONSUL_DOMAIN,
            fqdn=fqdn,
            hostname=hostname,
            id=id,
            region=region,
            role=role,
            tfid=tfid,
        )

    return struct(create=create)


server_name_metadata = ServerNameMetadata(tf.resource)


def create_droplet(tf, nmd, user_data=""):
    droplet = DigitaloceanDroplet(
        name=nmd.hostname,
        image="ubuntu-18-04-x64",
        region=nmd.region,
        size="s-1vcpu-1gb",
        ssh_keys=[
            "${digitalocean_ssh_key.%s.id}" % keyname
            for keyname in tf.digitalocean_ssh_key.keys()
        ],
        tags=[nmd.role, nmd.cluster],
        private_networking=True,
        user_data=user_data,
    )
    if nmd.id > 0:
        droplet.lifecycle = Lifecycle(
            ignore_changes=["user_data"], create_before_destroy=True
        )
    return droplet


def DeviceUserData(role, nmd, provider):
    nomad_config = """\
advertise {
    http = "{{GetPublicIP}}"
    rpc = "{{GetPublicIP}}"
    serf = "{{GetPublicIP}}"
}
"""

    def render():
        return [
            String("#!/bin/bash"),
            Base(),
            Consul(
                nmd.role,
                nmd,
                join_lan=[
                    CONSUL_JOIN_ARGS[provider].format(
                        dc=nmd.region, token=TOKENS[provider]
                    )
                ],
                ca=ca,
            ),
            Docker(),
            Nomad(
                role,
                nmd,
                # ca=ca,
                additional_config=nomad_config,
            ),
        ]

    return Component("DeviceUserData", render)


def create_device(tf, nmd, provider):
    """
    create_device adds devices and their "pet" names to the terraform object

    Args:
        tf: The terraform protobuf object
        nmd: Node Metadata
        provider: The cloud provider to use
    """

    user_data = compile(DeviceUserData(nmd.role, nmd, provider))

    if provider == "digitalocean":
        tf.digitalocean_droplet[nmd.tfid] = create_droplet(tf, nmd, user_data)


def Cluster(
    tf, provider, region, cluster_name="c01", index=0, servers_count=0, clients_count=0
):
    """
    Cluster will generate a cluster of servers

    Args:
        tf:
        provider:
        region:
        cluster_name:
        index:
        servers_count:
        clients_count:
    """
    if index < 0:
        fail("index must by positive (got: %d)" % index)

    if servers_count not in [3, 5, 7]:
        fail("servers_count must be one of 3, 5 or 7 (got: %d)" % servers_count)

    for i in range(index + 0, index + servers_count):
        nmd = server_name_metadata.create("server", i, region, cluster_name)
        create_device(tf, nmd, provider)
    for i in range(index + 0, index + clients_count):
        nmd = server_name_metadata.create("client", i, region, cluster_name)
        create_device(tf, nmd, provider)


CLUSTERS = [
    Cluster(
        tf.resource,
        "digitalocean",
        region="ams3",
        cluster_name="c01",
        servers_count=3,
        index=3,
    )
]
