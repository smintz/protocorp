# vi:filetype=python syntax=python
"""
This is the entrypoint of the terraform file.
"""
load("cluster.proto", "Cluster", "Tier")
load("/terraform/terraform.proto", "Terraform")
load(
    "/terraform/digitalocean-resources.proto",
    "DigitaloceanDroplet",
    "DigitaloceanSshKey",
)
load("/terraform/cloudflare-resources.proto", "CloudflareRecord")
load("/terraform/random-resources.proto", "RandomPet", "RandomId")
load("/terraform/google-data.proto", "GoogleComputeInstance")
load("/terraform/meta.proto", "Lifecycle")
load("installers/base.pinc", "Base")
load("installers/docker.pinc", "Docker")
load("installers/consul.pinc", "Consul")
load("installers/vault.pinc", "Vault")
load("installers/nomad.pinc", "Nomad")
load("installers/protoconf_binary.pinc", "ProtoconfBinary")
load("ca.pinc", "CA")
load("/employees/employees.pinc", "EMPLOYEES")
load("/pc4os/pc4os.pinc", "compile")
load("/pc4os/component.pinc", "Component", "String")
load("mutable:infra/counter", counter="value")

COUNTER = counter.global_counter
SERVERS = 3
CLIENTS = 0

# CONSUL_DOMAIN = "pco.nf"
CONSUL_DOMAIN = "protoconf.sh"
CF_PROTOCONF_COM_ID = "0280c074462b8ec6ff40f9b1790f7af3"
# CF_PCO_NF_ID = "f05cf5af25ffab8e186f43cfea099628"
CF_PCO_NF_ID = "509ed139781f06c94ebb5d6c9d9e85be"

# Providers
DIGITALOCEAN = str(Cluster.Providers.DIGITALOCEAN)

tf = Terraform(resource=Terraform.Resources())
ca = CA(tf.resource)
tf.resource.random_id["consul_encrypt"] = RandomId(byte_length=16)
tf.resource.random_id["nomad_encrypt"] = RandomId(byte_length=16)
provider = DIGITALOCEAN
CONSUL_JOIN_ARGS = {
    DIGITALOCEAN: "provider=digitalocean api_token={token} region={dc} tag_name=server",
    # Will support more providers later
}
CONSUL_JOIN_WAN_ARGS = {
    DIGITALOCEAN: "provider=digitalocean api_token={token} tag_name=server",
    # Will support more providers later
}


TOKENS = {DIGITALOCEAN: "${var.digitalocean_token}"}


def get_cluster_name(cluster_number):
    if cluster_number < 10:
        return "c0" + str(cluster_number)
    else:
        return "c" + str(cluster_number)


def set_ssh_keys(tf, provider):
    """
    set_ssh_keys adds ssh keys of protocorp's employees to our provider project

    Args:
        tf: an instance of Terraform.Resource 
        provider: the provider type (digitalocean)
    """
    for e in EMPLOYEES:
        key_counter = 0
        for key in e.ssh_keys:
            key_name = "%s-%d" % (e.unix_name, key_counter)
            if provider == DIGITALOCEAN:
                tf.digitalocean_ssh_key[key_name] = DigitaloceanSshKey(
                    name=key_name, public_key=key
                )
            key_counter = key_counter + 1


set_ssh_keys(tf.resource, provider)


def ServerNameMetadata(tf):
    def create(role, id, region, cluster):
        tfid = "-".join([role, str(id), region, cluster])
        tf.random_pet[tfid] = RandomPet()
        hostname = "${random_pet.%s.id}" % tfid
        dc = region + cluster
        fqdn = "{}.node.{}.{}".format(hostname, dc, CONSUL_DOMAIN)
        return struct(
            cluster=cluster,
            dc=dc,
            domain=CONSUL_DOMAIN,
            fqdn=fqdn,
            hostname=hostname,
            id=id,
            region=region,
            role=role,
            tfid=tfid,
        )

    return struct(create=create)


server_name_metadata = ServerNameMetadata(tf.resource)


def create_droplet(tf, nmd, user_data=""):
    droplet = DigitaloceanDroplet(
        name=nmd.hostname,
        image="ubuntu-18-04-x64",
        region=nmd.region,
        # size="s-1vcpu-1gb",
        size="s-2vcpu-4gb",
        ssh_keys=[
            "${digitalocean_ssh_key.%s.id}" % keyname
            for keyname in tf.digitalocean_ssh_key.keys()
        ],
        tags=[nmd.role, nmd.cluster],
        private_networking=True,
        user_data=user_data,
    )
    if nmd.id > 0:
        droplet.lifecycle = Lifecycle(
            ignore_changes=["user_data"], create_before_destroy=True
        )
    return droplet


def create_gcp_vm(tf, nmd, user_data=""):
    vm = GoogleComputeInstance(
        name=nmd.hostname,
        machine_type="f1-micro",
        zone=nmd.region + "-a",
        labels={"role": nmd.role, "cluster": nmd.cluster},
        tags=[nmd.role, nmd.cluster],
        metadata_startup_script=user_data,
        boot_disk=[
            GoogleComputeInstance.BootDisk(
                initialize_params=[
                    GoogleComputeInstance.BootDisk.InitializeParams(
                        image="ubuntu-os-cloud/ubuntu-1804-lts"
                    )
                ]
            )
        ],
        network_interface=[GoogleComputeInstance.NetworkInterface(network="default")],
    )
    if nmd.id > 0:
        vm.lifecycle = Lifecycle(
            ignore_changes=["metadata_startup_script"], create_before_destroy=True
        )
    return vm


def DeviceUserData(role, nmd, provider):
    """
    DeviceUserData will generate a userdata script for installing the instances

    Args:
        role: the role of the instance
        nmd: server name metadata factory
        provider: enum value
    Returns:
        DeviceUserData component
    """
    nomad_config = """\
advertise {
    http = "{{GetPublicIP}}"
    rpc = "{{GetPublicIP}}"
    serf = "{{GetPublicIP}}"
}
"""

    if role == "server":
        vault = Vault(nmd, ca=ca)
    else:
        vault = String("")

    def render():
        return [
            String("#!/bin/bash"),
            Base(),
            Consul(
                nmd.role,
                nmd,
                join_lan=[
                    CONSUL_JOIN_ARGS[provider].format(
                        dc=nmd.region, token=TOKENS[provider]
                    )
                ],
                join_wan=[
                    CONSUL_JOIN_WAN_ARGS[provider].format(
                        dc=nmd.region, token=TOKENS[provider]
                    ),
                    "wan.protoconf.com",
                ],
                ca=ca,
            ),
            vault,
            Docker(),
            Nomad(role, nmd, ca=ca, additional_config=nomad_config),
            ProtoconfBinary(),
        ]

    return Component("DeviceUserData", render)


def create_device(tf, nmd, provider):
    """
    create_device adds devices and their "pet" names to the terraform object

    Args:
        tf: The terraform protobuf object
        nmd: Node Metadata
        provider: The cloud provider to use
    """

    user_data = compile(DeviceUserData(nmd.role, nmd, provider))

    if provider == DIGITALOCEAN:
        tf.digitalocean_droplet[nmd.tfid] = create_droplet(tf, nmd, user_data)
        tf.cloudflare_record[nmd.tfid] = CloudflareRecord(
            zone_id=CF_PCO_NF_ID,
            name="{}.node.{}".format(nmd.hostname, nmd.dc),
            type="A",
            value="${digitalocean_droplet.%s.ipv4_address}" % nmd.tfid,
        )

    if provider == "google":
        tf.google_compute_instance[nmd.tfid] = create_gcp_vm(nmd.role, nmd, user_data)
        tf.cloudflare_record[nmd.tfid] = CloudflareRecord(
            zone_id=CF_PCO_NF_ID,
            name="{}.node.{}".format(nmd.hostname, nmd.dc),
            type="A",
            value="${google_compute_instance.%s.network_interface.0.network_ip}"
            % nmd.tfid,
        )


def ProvisionCluster(tf, cluster):
    """
    Cluster will generate a cluster of servers

    Args:
        tf: a resource instance
        cluster: a Cluster instance
    """
    cluster_name = get_cluster_name(cluster.cluster_number)
    index = COUNTER

    if cluster.servers_count not in [3, 5, 7]:
        fail("servers_count must be one of 3, 5 or 7 (got: %d)" % cluster.servers_count)

    servers = [
        server_name_metadata.create("server", i, cluster.region, cluster_name)
        for i in range(index + 0, index + cluster.servers_count)
    ]
    clients = []
    for t in cluster.tiers:
        clients.extend(
            [
                server_name_metadata.create(t.name, i, cluster.region, cluster_name)
                for i in range(index + 0, index + t.count)
            ]
        )

    for nmd in servers + clients:
        create_device(tf, nmd, str(cluster.provider))
        tf.cloudflare_record[nmd.tfid + "-" + "star"] = CloudflareRecord(
            zone_id=CF_PCO_NF_ID,
            name="{}.service.{}".format("*", cluster.region + cluster_name),
            type="A",
            ttl=120,
            value="${digitalocean_droplet.%s.ipv4_address}" % nmd.tfid,
        )

    for svc in ["consul", "nomad", "vault"]:
        for nmd in servers:
            tf.cloudflare_record[nmd.tfid + "-" + svc] = CloudflareRecord(
                zone_id=CF_PCO_NF_ID,
                name="{}.service.{}".format(svc, cluster.region + cluster_name),
                type="A",
                ttl=1,
                value="${digitalocean_droplet.%s.ipv4_address}" % nmd.tfid,
            )

    for nmd in servers:
        tf.cloudflare_record[nmd.tfid + "-wan"] = CloudflareRecord(
            zone_id=CF_PROTOCONF_COM_ID,
            name="wan",
            type="A",
            ttl=120,
            value="${digitalocean_droplet.%s.ipv4_address}" % nmd.tfid,
        )


CLUSTERS = [
    Cluster(
        provider=Cluster.Providers.DIGITALOCEAN,
        region="ams3",
        cluster_number=1,
        servers_count=3,
        tiers=[Tier(name="general", count=0)],
    ),
    Cluster(
        provider=Cluster.Providers.DIGITALOCEAN,
        region="lon1",
        cluster_number=1,
        servers_count=3,
        tiers=[Tier(name="general", count=0)],
    ),
]

for c in CLUSTERS:
    ProvisionCluster(tf.resource, c)
