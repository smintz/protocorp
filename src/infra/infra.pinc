# vi:filetype=python syntax=python
"""
This is the entrypoint of the terraform file.
"""
load("cluster.proto", "Cluster", "Tier", "ClusterVersions")
load("/terraform/terraform.proto", "Terraform")
load("/terraform/digitalocean-resources.proto", "DigitaloceanSshKey")
load("/terraform/random-resources.proto", "RandomId")
load("ca.pinc", "CA")
load("/employees/employees.pinc", "EMPLOYEES")
load("components/device_userdata.pinc", "DeviceUserDataFactory")
load("providers/registry.pinc", "ProviderFactory")

# Providers
DIGITALOCEAN = str(Cluster.Providers.DIGITALOCEAN)

tf = Terraform(resource=Terraform.Resources())
ca = CA(tf.resource)
tf.resource.random_id["consul_encrypt"] = RandomId(byte_length=16)
tf.resource.random_id["nomad_encrypt"] = RandomId(byte_length=16)
provider = DIGITALOCEAN


def set_ssh_keys(tf, provider):
    """
    set_ssh_keys adds ssh keys of protocorp's employees to our provider project

    Args:
        tf: an instance of Terraform.Resource 
        provider: the provider type (digitalocean)
    """
    for e in EMPLOYEES:
        key_counter = 0
        for key in e.ssh_keys:
            key_name = "%s-%d" % (e.unix_name, key_counter)
            if provider == DIGITALOCEAN:
                tf.digitalocean_ssh_key[key_name] = DigitaloceanSshKey(
                    name=key_name, public_key=key
                )
            key_counter = key_counter + 1


set_ssh_keys(tf.resource, provider)


def DefaultVersions(
    consul_version="1.7.1",
    vault_version="1.3.2",
    nomad_version="0.10.4",
    protoconf_version="0.1.1",
):
    return ClusterVersions(
        consul_version=consul_version,
        vault_version=vault_version,
        nomad_version=nomad_version,
        protoconf_version=protoconf_version,
    )


CLUSTERS = [
    # Cluster(
    #     provider=Cluster.Providers.DIGITALOCEAN,
    #     region="ams3",
    #     cluster_number=1,
    #     tiers=[Tier(name="server", count=3), Tier(name="general", count=0)],
    #     ready=True,
    # ),
    # Cluster(
    #     provider=Cluster.Providers.PACKET,
    #     region="ams1",
    #     cluster_number=1,
    #     ready=True,
    #     tiers=[
    #         Tier(name="server", count=3),
    #         # Tier(name="general", count=1, instance_type="c3.small.x86"),
    #     ],
    #     versions=DefaultVersions(),
    # ),
    # Cluster(
    #     provider=Cluster.Providers.PACKET,
    #     region="ams1",
    #     cluster_number=1,
    #     ready=True,
    #     tiers=[
    #         Tier(name="server", count=3),
    #         # Tier(name="general", count=1, instance_type="c3.small.x86"),
    #     ],
    #     versions=DefaultVersions(
    #         nomad_version="0.11.1", consul_version="1.7.3", vault_version="1.4.1"
    #     ),
    # )
]

join_wan = [ProviderFactory(tf.resource, c).Join for c in CLUSTERS]
for c in CLUSTERS:
    cluster = ProviderFactory(tf.resource, c)
    for tier in c.tiers:
        cluster.CreateTier(
            tier, DeviceUserDataFactory(ca, c, join=[cluster.Join], join_wan=join_wan)
        )
